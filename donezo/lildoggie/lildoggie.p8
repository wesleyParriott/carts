pico-8 cartridge // http://www.pico-8.com
version 41
__lua__

actor = {} -- all actors

left=0 
rite=1
uppp=2
down=3

-- new thing

-- make an actor
-- and add to global collection
-- x,y means center of the actor
-- in map tiles
function make_actor(k, x, y)
	a={
		k = k,
		x = x,
		y = y,
		accelfloor = 0.005,
		accelceil  = 0.065,
		accel = 0.003,
		-- how much is going to be
		-- added when plr moves
		vel = 0.01,
		dx = 0,
		dy = 0,		
		frame = 0,
		t = 0,
		friction = 0.15,
		bounce  = 0.3,
		frames = 2,
		
		-- half-width and half-height
		-- slightly less than 0.5 so
		-- that will fit through 1-wide
		-- holes.
		w = 0.4,
		h = 0.4,
	}
	
	add(actor,a)
	
	return a
end

particlesys = {}

function particles_init(howmany)

	i = 0
	-- if particles don't move
	-- we know we did something
	-- bad
	add_x = 0 
	add_y = 0
	state = 0

	psys = {
		ttl  = 10,
		timer = 0,
		p = {}
	}
	
	for i=1,howmany,1 do
		if state == 0 then
			-- up right
			add_x = 1
			add_y = -1
		elseif state == 1 then
			-- down right
			add_x = 1
			add_y = 1
		elseif state == 2 then
			-- down left
			add_x = -1
			add_y = 1
		elseif state == 3 then
			-- up left
			add_x = -1
			add_y = 1
		end
		state += 1
		state %= 4

		p = {
			init_x=64,
			init_y=64,
			x=64,
			y=64,
			add_x=add_x,
			add_y=add_y,
			sprt=018,
			timer=0,
			ttl=10
		}

		add(psys.p, p)

	end

	add(particlesys, psys)

end


function particles_do()

	psys = particlesys[1]

	for p in all(psys.p) do
		if p.timer < p.ttl then
			spr(p.sprt, p.x, p.y)
			p.x += p.add_x
			p.y += p.add_y
			p.timer += 1
		end

	end

	psys.timer += 1

	if psys.timer > psys.ttl then
		psys.timer = 0
		for p in all(psys.p) do 
			p.x = p.init_x
			p.y = p.init_y
			p.timer = 0
		end
	end

end


function _init()

	music(0)

	particles_init(5)

	-- make player
	pl = make_actor(1,2,2)
	pl.frames=3
	-- egg = make_actor(018, 3, 3)

end

-- for any given point on the
-- map, true if there is wall
-- there.

function solid(x, y)
	-- grab the cel value
	val=mget(x, y)
	
	-- check if flag 1 is set (the
	-- orange toggle button in the 
	-- sprite editor)
	return fget(val, 1)
	
end

function egg(x, y)
	val=mget(x,y)
	return fget(val, 0)
end

-- solid_area
-- check if a rectangle overlaps
-- with any walls

--(this version only works for
--actors less than one tile big)

function solid_area(x,y,w,h)
	return 
		solid(x-w,y-h) or
		solid(x+w,y-h) or
		solid(x-w,y+h) or
		solid(x+w,y+h)
end


-- true if [a] will hit another
-- actor after moving dx,dy

-- also handle bounce response
-- (cheat version: both actors
-- end up with the velocity of
-- the fastest moving actor)

function solid_actor(a, dx, dy)
	for a2 in all(actor) do
		if a2 != a then
		
			local x=(a.x+dx) - a2.x
			local y=(a.y+dy) - a2.y
			
			if ((abs(x) < (a.w+a2.w)) and
					 (abs(y) < (a.h+a2.h)))
			then
				
				-- moving together?
				-- this allows actors to
				-- overlap initially 
				-- without sticking together    
				
				-- process each axis separately
				
				-- along x
				
				if (dx != 0 and abs(x) <
				    abs(a.x-a2.x))
				then
					
					v=abs(a.dx)>abs(a2.dx) and 
					  a.dx or a2.dx
					a.dx,a2.dx = v,v
					
					local ca=
					 collide_event(a,a2) or
					 collide_event(a2,a)
					return not ca
				end
				
				-- along y
				
				if (dy != 0 and abs(y) <
					   abs(a.y-a2.y)) then
					v=abs(a.dy)>abs(a2.dy) and 
					  a.dy or a2.dy
					a.dy,a2.dy = v,v
					
					local ca=
					 collide_event(a,a2) or
					 collide_event(a2,a)
					return not ca
				end
				
			end
		end
	end
	
	return false
end


-- checks both walls and actors
function solid_a(a, dx, dy)
	if solid_area(a.x+dx,a.y+dy,
				a.w,a.h) then
				return true end
	return solid_actor(a, dx, dy) 
end

-- return true when something
-- was collected / destroyed,
-- indicating that the two
-- actors shouldn't bounce off
-- each other

function collide_event(a1,a2)
	
	-- player collects treasure
	if (a1==pl and a2.k==018) then
		del(actor,a2)
		sfx(3)
		return true
	end
	
	sfx(2) -- generic bump sound
	
	return false
end

function move_actor(a)

	-- only move actor along x
	-- if the resulting position
	-- will not overlap with a wall

	if not solid_a(a, a.dx, 0) then
		a.x += a.dx
	else
		a.dx *= -a.bounce
	end

	-- ditto for y

	if not solid_a(a, 0, a.dy) then
		a.y += a.dy
	else
		a.dy *= -a.bounce
	end
	
	-- apply friction
	-- (comment for no inertia)
	
	a.dx *= (1-a.friction)
	a.dy *= (1-a.friction)
	a.accel -= (a.vel/2)
	
	-- advance one frame every
	-- time actor moves 1/4 of
	-- a tile
	
	a.frame += abs(a.dx) * 4
	a.frame += abs(a.dy) * 4
	a.frame %= a.frames

	a.t += 1
	
end

function control_player(pl, dirc)

	pl.accel += pl.vel

	if (dirc==left) then 
		pl.dx -= pl.accel 
	end
	if (dirc==rite) then 
		pl.dx += pl.accel 
	end
	if (dirc==uppp) then 
		pl.dy -= pl.accel 
	end
	if (dirc==down) then 
		pl.dy += pl.accel 
	end
	
end

function _update()
	
	if (btn(0)) control_player(pl,left)
	if (btn(1)) control_player(pl,rite)
	if (btn(2)) control_player(pl,uppp) 
	if (btn(3)) control_player(pl,down)
	-- mid is clamp
	pl.accel = mid(pl.accelfloor, pl.accel, pl.accelceil)
	foreach(actor, move_actor)
	if (egg(pl.x, pl.y)) sfx(3)
end

function draw_actor(a)
	local sx = (a.x * 8) - 4
	local sy = (a.y * 8) - 4
	spr(a.k + a.frame, sx, sy)
end

timer = 100

function _draw()
	cls()

	room_x=flr(pl.x/16)
	room_y=flr(pl.y/16)
	camera(room_x*128,room_y*128)
	
	map()
	foreach(actor,draw_actor)
	print("hello lildoggie", 10, 10, 7)
	
end

__gfx__
00000000099999909990099909999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000491991949194491949199194000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700499199949994499149919994000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000091111901190091109111190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000099999909990099909999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700090000900090090009000090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000090000900090090009000090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000990009900990090099000990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000888888880777770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000800800087777770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000800800087779977700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000800880087799997700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000888888887799997700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000800000087779977700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000800000087777777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000888888880777777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1100000000000000000000000000001111000000000000000000000000111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1100000000000000000000000000001111000000000000000000000000111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1100000000000000000000000000001111000000000000000000000000111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1100000000000000000000000000001111000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1100000000000000120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1100000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1100000000000000000000000000000000000000000000000000000000111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1100000000000000000000000000000000000000000000000000000000111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1100000000000000000000000000000000000000000000000000000000111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1100000000000000000000000000001111000000000000000000000000111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1100000000000000000000000000001111000000000000000000000000111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
c71c00000f617106170f6170e6170f6170f6170e6170e6170e6170e6170e6170e6170e6170f6170f617106170f6170f6170f6170f6170f6170f6170f6170f6170f6170f6170f6170f6170f6170f6170f6170f617
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000100002a050280502805026050250502405021050200501e0501c0501a05017050140501105000000100500e0500e0500e050100501405017050190501c0501e0502205023050250502505025050100501d050
__music__
02 00424344

