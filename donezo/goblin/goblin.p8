pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
--main loops--

--
-- random tresure [x]
-- beat when either treasure is all got [x]
-- title screen [x]
-- win screen [x]
-- reset when died/won

nominal_row_value = 128 / 16
nominal_col_value = 128 / 16
treasure_count_to_win = 0

function n_is_in(tbl, n)
	if (count(tbl) <= 0) then
		return false 
	end

	for num in all(tbl) do
		if num == n then
			return true
		end
	end

	return false
end


function make_treasures()
	treasures={}
	amount = flr(rnd(5)) + 1
	treasure_count_to_win=amount
	x_modifiers={}
	y_modifiers={}
	for i=0, amount-1 do
		x_modifier=flr(rnd(15))
		while(true) do
			if n_is_in(x_modifiers, x_modifier) then
				x_modifier = flr(rnd(15))
			else 
				break
			end
		end
		add(x_modifiers, x_modifier)
		y_modifier=flr(rnd(15))
		while(true) do
			if n_is_in(y_modifiers, y_modifier) then
				y_modifier = flr(rnd(15))
			else 
				break
			end
		end
		add(y_modifiers, y_modifier)

		treasure = {
			x=nominal_row_value*x_modifier,
			y=nominal_row_value*y_modifier
		}

		add(treasures, treasure)
	end

	return treasures
end

function make_enemies(treasures)
	enemies={}
	x_modifiers={}
	y_modifiers={}
	amount = 4
	for i=0, amount-1 do 
		x_modifier=flr(rnd(15))
		while (true) do
			if n_is_in(x_modifiers, x_modifier) then
				x_modifer = flr(rnd(15))
			else
				break
			end
		end
		add(x_modifiers, x_modifer)
		y_modifier=flr(rnd(15))
		while (true) do
			if n_is_in(y_modifiers, y_modifier) then
				y_modifer = flr(rnd(15))
			else
				break
			end
		end
		add(y_modifiers, y_modifer)

		enemy = {
			x=nominal_row_value*x_modifier,
			y=nominal_row_value*y_modifier
		}

		add(enemies, enemy)
	end

	return enemies
end

function there_be_treasure(trs,x,y)
	for t in all(treasures) do
		if t.x == x and t.y == y then
			return true
		end
	end
	return false
end

function goblinize(treasures, pl)
	for treasure in all(treasures) do
		if pl.x == treasure.x and pl.y == treasure.y then
			add(pl.goblinized_treasure, treasure)
			del(treasures, treasure)
		end
	end
end

function move_enemies(where)

	for enemy in all(enemies) do

		if where == l or where == r then
			if enemy.x > pl.x then 
				enemy.x-=nominal_row_value*2

			end
			if enemy.x < pl.x then 
				enemy.x+=nominal_row_value*2
			end
		elseif where==u or where==d then
			if enemy.y > pl.y then 
				enemy.y-=nominal_col_value*2

			end
			if enemy.y < pl.y then 
				enemy.y+=nominal_col_value*2
			end
		end

	end
	
end

function set_gamestate(state)

	assert(state < 4)

	if gamestate==win or gamestate==died then 
		_init()
	end
	gamestate=state

end

function found_enemy(x,y) 
	for enemy in all(enemies) do
		if x == enemy.x and y == enemy.y then
			return true
		end
	end
	return false
end

function _init()
	pl = {
		x = 8,
		y = 16,
		life=1,
		goblinized_treasure={},
		move = function(self, where)
			assert(where < 4)
			sfx(0)
			if where == u then
				self.y -= nominal_col_value
				if self.y < 0 then
					self.y = 128 - nominal_col_value
				end
			end
			if where == d then
				self.y += nominal_col_value
				if self.y >= 128 then
					self.y = 0
				end
			end
			if where == l then
				self.x -= nominal_row_value
				if self.x < 0 then
					self.x = 128 - nominal_row_value
				end
			end
			if where == r then
				self.x += nominal_row_value
				if self.x >= 128 then
					self.x = 0
				end
			end
			if there_be_treasure(treasures, self.x, self.y) then
				sfx(1)
				goblinize(treasures, self)
			end
			move_enemies(where)
		end,
		harm=function(self)
			cls()
			if found_enemy(self.x,self.y) then
				sfx(02)
				self.life -= 1
				if self.life <= 0 then
					gamestate=died
					return
				end
			end

		end
	}

	treasures=make_treasures()
	enemies=make_enemies()

	-- directionals
	u=0
	d=1
	l=2
	r=3
	-- game state
	title=0
	goblin=1
	win=2
	died=3

	gamestate=title
end

function _update()

	if(gamestate==goblin) then
		pl:harm(enemies)
	end

	if btnp(⬆️) then pl:move(u) end
	if btnp(⬇️) then pl:move(d) end
	if btnp(⬅️) then pl:move(l) end
	if btnp(➡️) then pl:move(r) end
	if btnp(4) or btnp(5) then set_gamestate(goblin) end

	if (count(pl.goblinized_treasure)) == treasure_count_to_win then
		gamestate=win
	end
	
end

function _draw()
 cls()

	if(gamestate==title) then
		print(" g o b l i n ")
		print("walk around with ⬆️ ⬇️ ⬅️ ➡️")
		print("don't touch the flames")
		print("grab treasure")
		print("press x/z to play")
		return
	end


	if(gamestate==died) then
		print(" d i e d ")
		print("press x/z to play")
		return
	end

	if (gamestate==win) then
		print("g o b l i n i z e d")
		print("press x/z to play")
		return
	end

	map()

	for treasure in all(treasures) do
		spr(003, treasure.x, treasure.y)
	end

	for enemy in all(enemies) do
		spr(004, enemy.x, enemy.y)
	end

	spr(032, pl.x, pl.y)

end

__gfx__
00000000bbbbbbbb3333333300000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000b000000b3000000304444440000880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700b000000b3000000304444440008888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000b000000b30000003044aa44000a88a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000b000000b300000030aa55aa0008888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700b000000b30000003044aa440088998800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000b000000b3000000304444440088998800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000bbbbbbbb3333333300000000008888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08800880088008800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88088088888888880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
80000008888888880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
80000008888888880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
80000008888888880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08000080088888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00800800008888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00088000000880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00800800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
09899890000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
099cc990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
09099090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00099000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
09999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
09900990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0102010201020102010201020102010200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0201020102010201020102010201020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0102010201020102010201020102010200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0201020102010201020102010201020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0102010201020102010201020102010200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0201020102010201020102010201020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0102010201020102010201020102010200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0201020102010201020102010201020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0102010201020102010201020102010200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0201020102010201020102010201020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0102010201020102010201020102010200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0201020102010201020102010201020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0102010201020102010201020102010200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0201020102010201020102010201020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0102010201020102010201020102010200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0201020102010201020102010201020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
c301000020625206252062520625206252162521625216252162520625206251f6251f6251d6251a6251a625186251862518625186250c0000c0000c0000c0000c00000000000000000000000000000000000000
070100001963011630186301c63024630206301d6301d6301e63021630236301a6401d6402064021640216401c640206402164022640184401a4401c4401d4301d4301f4302043021430234301a4201b42018420
00010000000001155014550175501a5501d5502155022550255502655028550155501c5502355028550235501c5501b550235502855020550185501d55024550215501c550185501755016550145500f5500e550
000100000f6201362015620186301a6301e630206302263024630266302763028640296402963028630276302663024630226301e6301b630186301563013630116200e6200b6200a6200a620086100861000010
